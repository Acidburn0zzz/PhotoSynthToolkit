/*
	Copyright (c) 2010 ASTRE Henri (http://www.visual-experiments.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
*/

#include <iostream>
#include <fstream>
#include <string>
#include <vector>

int main(int argc, char* argv[])
{
	if (argc != 5 && argc != 6)
	{
		std::cout << "Usage: " << argv[0]<< " <input.patch> <vis.dat> <nbPicture> <threshold> <dump.csv>"<<std::endl;
		std::cout << "<input.patch>: path to .patch file generated by previous PMVS call" << std::endl;
		std::cout << "<vis.dat>: output file for next PMVS call"  << std::endl;
		std::cout << "<nbPicture>: nb picture in visualize folder"<<std::endl;
		std::cout << "	-> may be inferior to nb picture taken if not 100% synthy" << std::endl;
		std::cout << "	-> it's the number of camera found in the first coord system" << std::endl;
		std::cout << "<threshold>: 0 is a good value"<<std::endl;
		std::cout << "	-> -1: very slow but full reconstruction" << std::endl;
		std::cout << "	-> +infinity: very quick but no reconstruction" << std::endl;
		std::cout << "<dump.csv>: output file optional that help to choose a good threshold" << std::endl;

		return -1;
	}	

	std::ifstream input(argv[1]);
	if (!input.is_open())
	{
		std::cout << "Failed to open " << argv[1]<< " for reading" <<std::endl;
		return -1;
	}
	std::ofstream output(argv[2]);
	if (!output.is_open())
	{
		std::cout << "Failed to open " << argv[2]<< " for reading" <<std::endl;
		return -1;
	}

	int nbPicture = atoi(argv[3]);
	int threshold = atoi(argv[4]);

	std::vector<std::vector<int>> visibilityMap;
	visibilityMap = std::vector<std::vector<int>>(nbPicture);
	for (int i=0; i<nbPicture; ++i)
	{
		visibilityMap[i] = std::vector<int>(nbPicture);
		for (int j=0; j<nbPicture; ++j)
		{
			visibilityMap[i][j] = 0;
		}
	}

	std::string line;
	std::getline(input, line); //PATCHES
	int nbPatch;
	input >> nbPatch;
	std::getline(input, line); //end-of-line
	
	for (int i=0; i<nbPatch; ++i)
	{
		std::getline(input, line); //PATCHS
		std::getline(input, line); //position (3 float)
		std::getline(input, line); //normal   (3 float)
		std::getline(input, line); //debug    (3 float)
		int nbPictureInWitchPatchIsVisible;
		input >> nbPictureInWitchPatchIsVisible;

		std::vector<int> pictureIndexes(nbPictureInWitchPatchIsVisible);
		for (int j=0; j<nbPictureInWitchPatchIsVisible; ++j)
		{
			int pictureIndex;
			input >> pictureIndex;
			pictureIndexes[j] = pictureIndex;
		}

		for (int j=0; j<(int)pictureIndexes.size()-1; ++j)
		{
			int indexA = pictureIndexes[j];
			for (int k=j+1; k<(int)pictureIndexes.size(); ++k)
			{				
				int indexB = pictureIndexes[k];
				visibilityMap[indexA][indexB]++;
				visibilityMap[indexB][indexA]++;
			}
		}
		std::getline(input, line); // (not used) end-of-line
		std::getline(input, line); // (not used) nb picture (texture not agree -> http://grail.cs.washington.edu/software/pmvs/documentation.html)
		std::getline(input, line); // (not used) picture indexes
		std::getline(input, line); // (not used) empty line
	}
	input.close();

	//Writing dump file to help choosing a good threshold
	if (argc == 6)
	{
		std::ofstream dump(argv[5]);
		if (!dump.is_open())
			std::cout << "Failed to open " << argv[5]<< " for writing" <<std::endl;
		else
		{
			for (int i=0; i<nbPicture; ++i)
			{
				for (int j=0; j<nbPicture; ++j)
					dump << visibilityMap[i][j] << ";";
				dump << std::endl;
			}
		}
		dump.close();
	}

	output << "VISDATA" << std::endl;
	output << nbPicture << std::endl;
	for (int i=0; i<nbPicture; ++i)
	{
		std::vector<int> pictureIndexes;
		for (int j=0; j<nbPicture; ++j)
		{
			if (visibilityMap[i][j] > threshold)
				pictureIndexes.push_back(j);
		}

		output << i << " " << pictureIndexes.size() << " ";
		for (int j=0; j<(int)pictureIndexes.size(); ++j)
		{
			output << pictureIndexes[j] << " ";
		}
		output << std::endl;
	}
	output.close();

	return 0;
}